version: '3.8'

services:

  db:
    image: postgres:15.1-alpine
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - todolist_pg_data_14:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${DB_USER} -d ${DB_NAME}
      interval: 3s
      timeout: 3s
      retries: 15
    ports:
      - "5432:5432"

  run_migrations:
    build: .
    env_file: .env
    environment:
      DB_HOST: db
    depends_on:
      db:
        condition: service_healthy
    command: python manage.py migrate

  api:
    build: .
    env_file: .env
    environment:
      DB_HOST: db
      DEBUG: false
    depends_on:
      db:
        condition: service_healthy
      run_migrations:
        condition: service_completed_successfully
    ports:
      - "8000:8000"
    volumes:
      - ./core:/opt/todolist/core
      - ./goals:/opt/todolist/goals
      - ./todolist:/opt/todolist/todolist

  collect_static:
    build: .
    env_file: .env
    command: python manage.py collectstatic -c --no-input
    volumes:
      - django_static:/opt/todolist/static/


  frontend:
    image: sermalenk/skypro-front:lesson-38
    restart: on-failure
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_started
      collect_static:
        condition: service_completed_successfully
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - django_static:/usr/share/nginx/html/static/

  bot:
    build: .
    env_file:
      - .env
    environment:
      DB_HOST: db
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
    volumes:
      - ./bot:/opt/todolist/bot
    command: python manage.py runbot

volumes:
  todolist_pg_data_14:
  django_static:
